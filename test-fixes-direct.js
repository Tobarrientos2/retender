#!/usr/bin/env node

/**
 * Test Directo de las Correcciones Implementadas
 * 
 * Este script verifica que las correcciones est√©n implementadas correctamente
 * sin depender de la conexi√≥n WebSocket.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log("üîç VERIFICANDO CORRECCIONES IMPLEMENTADAS");
console.log("==========================================");

// 1. Verificar fix del frontend
console.log("\n1. üîß Verificando fix del frontend...");
const frontendPath = path.join(__dirname, 'src/components/ReviewInterface.tsx');
const frontendContent = fs.readFileSync(frontendPath, 'utf8');

if (frontendContent.includes('originalAffirmations: affirmations.map(aff => ({')) {
  console.log("   ‚úÖ Frontend bug CORREGIDO - par√°metro correcto");
} else {
  console.log("   ‚ùå Frontend bug NO corregido");
}

// 2. Verificar configuraci√≥n de IA
console.log("\n2. ‚öôÔ∏è Verificando configuraci√≥n de IA...");
const aiPath = path.join(__dirname, 'convex/ai.ts');
const aiContent = fs.readFileSync(aiPath, 'utf8');

if (aiContent.includes('temperature: 0.4')) {
  console.log("   ‚úÖ Temperatura reducida a 0.4 - m√°s consistente");
} else {
  console.log("   ‚ùå Temperatura NO optimizada");
}

if (aiContent.includes('topK: 20')) {
  console.log("   ‚úÖ topK reducido a 20 - menos variabilidad");
} else {
  console.log("   ‚ùå topK NO optimizado");
}

// 3. Verificar prompt mejorado
console.log("\n3. üìù Verificando prompt mejorado...");

if (aiContent.includes('PROHIBIDO usar analog√≠as')) {
  console.log("   ‚úÖ Regla anti-analog√≠as agregada");
} else {
  console.log("   ‚ùå Regla anti-analog√≠as NO agregada");
}

if (aiContent.includes('como si fueran equipos de f√∫tbol')) {
  console.log("   ‚úÖ Ejemplo espec√≠fico de analog√≠a prohibida");
} else {
  console.log("   ‚ùå Ejemplo de analog√≠a prohibida NO encontrado");
}

if (aiContent.includes('conflicto b√©lico" ‚Üí "gran pelea')) {
  console.log("   ‚úÖ Ejemplos de transformaciones correctas");
} else {
  console.log("   ‚ùå Ejemplos de transformaciones NO encontrados");
}

// 4. Verificar validaci√≥n de analog√≠as
console.log("\n4. üõ°Ô∏è Verificando validaci√≥n autom√°tica...");

if (aiContent.includes('analogyPatterns')) {
  console.log("   ‚úÖ Sistema de detecci√≥n de analog√≠as implementado");
} else {
  console.log("   ‚ùå Sistema de detecci√≥n NO implementado");
}

if (aiContent.includes('como si', 'parecido a', 'igual que')) {
  console.log("   ‚úÖ Patrones de analog√≠as definidos");
} else {
  console.log("   ‚ùå Patrones de analog√≠as NO definidos");
}

// 5. Verificar sistema de retry
console.log("\n5. üîÑ Verificando sistema de retry...");

if (aiContent.includes('maxRetries = 3')) {
  console.log("   ‚úÖ Sistema de retry implementado (3 intentos)");
} else {
  console.log("   ‚ùå Sistema de retry NO implementado");
}

if (aiContent.includes('for (let attempt = 1; attempt <= maxRetries')) {
  console.log("   ‚úÖ Loop de retry correctamente estructurado");
} else {
  console.log("   ‚ùå Loop de retry NO encontrado");
}

// 6. Verificar estructura de c√≥digo
console.log("\n6. üèóÔ∏è Verificando estructura de c√≥digo...");

// Contar try-catch blocks
const tryCount = (aiContent.match(/try \{/g) || []).length;
const catchCount = (aiContent.match(/\} catch \(/g) || []).length;

if (tryCount === catchCount) {
  console.log(`   ‚úÖ Estructura try-catch balanceada (${tryCount} pares)`);
} else {
  console.log(`   ‚ùå Estructura try-catch desbalanceada (${tryCount} try, ${catchCount} catch)`);
}

// Resumen final
console.log("\n" + "=".repeat(50));
console.log("üìä RESUMEN DE CORRECCIONES");
console.log("=".repeat(50));

const fixes = [
  frontendContent.includes('originalAffirmations: affirmations.map(aff => ({'),
  aiContent.includes('temperature: 0.4'),
  aiContent.includes('PROHIBIDO usar analog√≠as'),
  aiContent.includes('analogyPatterns'),
  aiContent.includes('maxRetries = 3'),
  tryCount === catchCount
];

const fixedCount = fixes.filter(Boolean).length;
const totalFixes = fixes.length;

console.log(`‚úÖ Correcciones implementadas: ${fixedCount}/${totalFixes}`);

if (fixedCount === totalFixes) {
  console.log("üéâ ¬°TODAS LAS CORRECCIONES IMPLEMENTADAS CORRECTAMENTE!");
  console.log("\nüìã PR√ìXIMOS PASOS:");
  console.log("1. Reiniciar servidor: npm run dev");
  console.log("2. Crear set de afirmaciones t√©cnicas");
  console.log("3. Probar 'Paraphrase Mode'");
  console.log("4. Verificar que NO aparezcan analog√≠as");
  console.log("5. Confirmar vocabulario t√©cnico impreciso");
} else {
  console.log("‚ö†Ô∏è  Algunas correcciones necesitan revisi√≥n");
}

console.log("\nüîó DOCUMENTACI√ìN:");
console.log("- Resumen completo: PARAPHRASE-FIX-SUMMARY.md");
console.log("- Documentaci√≥n t√©cnica: docs/prd-paraphrase-fix.md");

console.log("\n‚úÖ Verificaci√≥n completada");
